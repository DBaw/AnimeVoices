name: Build and Release

on:
  workflow_dispatch: # Manual trigger
  push: # Trigger on push to any branch
    branches: 
      - '*'
  pull_request: # Trigger on PR to main
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0

      - name: Build Executable
        run: dotnet publish -c Release -r win-x64 --self-contained true -o ./publish

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: anime-voices-build
          path: ./publish/*
          retention-days: 7

  release:
    runs-on: windows-latest
    if: ${{ github.event_name == 'pull_request' && github.base_ref == 'main' }}
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: anime-voices-build
          path: ./builds
  
      - name: Zip the Build Output
        run: Compress-Archive -Path './builds/*' -DestinationPath './builds/AnimeVoices.zip'

      - name: Setup Git User for Tagging
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine Version and Tag
        id: versioning
        shell: bash
        run: |
          # Fetch tags to work with
          git fetch --tags
      
          # Try to get the latest tag, fallback to default version
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "0.0.0")
          echo "Latest tag: $latest_tag"
      
          # Extract version components
          major=$(echo $latest_tag | cut -d'.' -f1)
          minor=$(echo $latest_tag | cut -d'.' -f2)
          build=$(echo $latest_tag | cut -d'.' -f3)
      
          # PR or direct push decides versioning behavior
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            minor=$((minor + 1))
            build=0
          else
            build=$((build + 1))
          fi
      
          # Formulate new tag
          new_tag="$major.$minor.$build"
          echo "New tag: $new_tag"
      
          # Pass variables to later steps
          echo "new_tag=$new_tag" >> $GITHUB_ENV

      - name: Create Git Tag
        run: |
          git tag ${{ env.new_tag }}
          git push origin ${{ env.new_tag }}

      - name: Create GitHub Release
        id: create_release  # Assign an ID to reference the output
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.new_tag }}
          release_name: Release ${{ env.new_tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1        
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/AnimeVoices.zip
          asset_name: AnimeVoices.zip
          asset_content_type: application/zip
